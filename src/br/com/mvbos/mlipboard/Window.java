/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.mvbos.mlipboard;

import java.awt.AWTException;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.SwingUtilities;
import javax.swing.Timer;

/**
 *
 * @author Marcus Becker
 */
public class Window extends javax.swing.JFrame {

    private int count;
    private Timer timer;
    private Robot robo;
    private final Clipboard clipboard;

    private Toolkit toolkit = Toolkit.getDefaultToolkit();

    /**
     * Creates new form Window
     */
    public Window() {
        initComponents();
        try {
            robo = new Robot();
        } catch (AWTException ex) {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
        }

        clipboard = toolkit.getSystemClipboard();

        Integer val = (Integer) printTimer.getValue();
        
        timer = new Timer(val, new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (cbAutoPrint.isSelected()) {
                    print();
                }
            }
        });
        timer.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sp = new javax.swing.JScrollPane();
        taResult = new javax.swing.JTextArea();
        lblImage = new javax.swing.JLabel();
        cbAutoLoad = new javax.swing.JCheckBox();
        cbAutoPrint = new javax.swing.JCheckBox();
        btnPrint = new javax.swing.JButton();
        btnPaste = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        cbHideWindow = new javax.swing.JCheckBox();
        printTimer = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Meu Clipboard");
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        taResult.setColumns(20);
        taResult.setRows(5);
        sp.setViewportView(taResult);

        lblImage.setBackground(new java.awt.Color(102, 204, 255));
        lblImage.setOpaque(true);

        cbAutoLoad.setText("Auto load");

        cbAutoPrint.setText("Auto Print");
        cbAutoPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAutoPrintActionPerformed(evt);
            }
        });

        btnPrint.setText("Print and Save");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });

        btnPaste.setText("Paste");
        btnPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPasteActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        cbHideWindow.setText("Hide on print");

        printTimer.setToolTipText("Number of shots per second");
        printTimer.setValue(1);
        printTimer.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                printTimerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblImage, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sp, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbAutoLoad)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPaste, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbAutoPrint)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(printTimer, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbHideWindow)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPrint)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnClear)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnPaste, btnPrint});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sp, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblImage, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbAutoLoad)
                    .addComponent(btnPaste)
                    .addComponent(btnPrint)
                    .addComponent(cbAutoPrint)
                    .addComponent(btnClear)
                    .addComponent(cbHideWindow)
                    .addComponent(printTimer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPasteActionPerformed
        paste();

    }//GEN-LAST:event_btnPasteActionPerformed


    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        print();

    }//GEN-LAST:event_btnPrintActionPerformed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        if (cbAutoLoad.isSelected()) {
            paste();
        }
    }//GEN-LAST:event_formWindowGainedFocus

    private void cbAutoPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAutoPrintActionPerformed
        btnPrint.setEnabled(!cbAutoPrint.isSelected());
    }//GEN-LAST:event_cbAutoPrintActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        taResult.setText(null);
    }//GEN-LAST:event_btnClearActionPerformed

    private void printTimerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_printTimerStateChanged

        Integer value = (Integer) printTimer.getValue();
        if (value < 1) {
            printTimer.setValue(1);
        } else if (value > 60) {
            printTimer.setValue(60);
        }

        timer.stop();
        timer.setDelay(((Integer) printTimer.getValue()) * 1000);
        timer.start();

    }//GEN-LAST:event_printTimerStateChanged

    private void print() throws HeadlessException {
        if (robo != null) {
            boolean hide = cbHideWindow.isSelected() && !cbAutoPrint.isSelected();

            if (hide) {
                this.setVisible(false);

                try {
                    Thread.sleep(300);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
                }

            }

            Dimension screenSize = toolkit.getScreenSize();
            BufferedImage print = robo.createScreenCapture(new Rectangle(screenSize));
            pasteImage(print);

            if (hide) {
                this.setVisible(true);
            }
        }
    }

    private void paste() {
        try {
            if (clipboard.isDataFlavorAvailable(DataFlavor.stringFlavor)) {
                taResult.append("\n");
                taResult.append(clipboard.getData(DataFlavor.stringFlavor).toString());

            } else if (clipboard.isDataFlavorAvailable(DataFlavor.javaFileListFlavor)) {
                List<File> files = (List<File>) clipboard.getData(DataFlavor.javaFileListFlavor);
                pasteFiles(files);

            } else if (clipboard.isDataFlavorAvailable(DataFlavor.imageFlavor)) {
                pasteImage((BufferedImage) clipboard.getData(DataFlavor.imageFlavor));
            }

        } catch (UnsupportedFlavorException | IOException ufe) {
            Logger.getLogger(getClass().getName()).log(null, null, ufe);
        }
    }

    private void pasteImage(BufferedImage image) {
        int nl = lblImage.getWidth(); //Math.round((float) image.getWidth() / image.getHeight() * lblImage.getWidth());
        int na = lblImage.getHeight();//Math.round((float) image.getHeight() / image.getWidth() * lblImage.getHeight());

        //BufferedImage resizeImage = new BufferedImage(lblImage.getWidth(), lblImage.getHeight(), BufferedImage.TYPE_INT_RGB);
        BufferedImage resizeImage = new BufferedImage(nl, na, BufferedImage.TYPE_INT_RGB);
        Graphics g = resizeImage.createGraphics();
        //g.drawImage(image, 0, 0, lblImage.getWidth(), lblImage.getHeight(), null);
        g.drawImage(image, 0, 0, nl, na, null);
        g.dispose();
        lblImage.setIcon(new ImageIcon(resizeImage));

        File fImg = new File("imagem_" + count + ".jpg");
        try {
            ImageIO.write(image, "jpg", fImg);
            count++;
            taResult.append("\nImagem salva em: " + fImg.getAbsolutePath());

        } catch (IOException ex) {
            Logger.getLogger(Window.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void pasteFiles(List<File> files) {
        if (files.size() == 1) {
            taResult.append(files.get(0).getAbsolutePath());
            taResult.append("\n");
            taResult.append(files.get(0).getName());
        } else {

            taResult.append("Caminho completo com ';':\n");
            for (File f : files) {
                taResult.append(f.getAbsolutePath());
                taResult.append(";");
            }

            taResult.append("\nNomes com ';':\n");

            for (File f : files) {
                taResult.append(f.getName());
                taResult.append(";");
            }

            taResult.append("\n");
            taResult.append("\nCaminho completo:\n");

            for (File f : files) {
                taResult.append(f.getAbsolutePath());
                taResult.append("\n");
            }

            taResult.append("\nNomes:\n");

            for (File f : files) {
                taResult.append(f.getName());
                taResult.append("\n");
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnPaste;
    private javax.swing.JButton btnPrint;
    private javax.swing.JCheckBox cbAutoLoad;
    private javax.swing.JCheckBox cbAutoPrint;
    private javax.swing.JCheckBox cbHideWindow;
    private javax.swing.JLabel lblImage;
    private javax.swing.JSpinner printTimer;
    private javax.swing.JScrollPane sp;
    private javax.swing.JTextArea taResult;
    // End of variables declaration//GEN-END:variables
}
